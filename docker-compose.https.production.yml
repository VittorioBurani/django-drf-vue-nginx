services:

  django:
    image: ${DOCKERHUB_USERNAME:?err}/${DOCKERHUB_REPOSITORY:?err}:${VERSION:?-latest}
    pull_policy: always
    environment:
      DEPLOYMENT_STAGE: 'PRODUCTION'
      VERSION: ${VERSION:?err}
      DEBUG: ${DEBUG:?err}
      PRIVATE_SERVER_IP: ${PRIVATE_SERVER_IP:?err}
      HTTP_PORT: ${HTTP_PORT:-80}
      HTTPS_PORT: ${HTTPS_PORT:-443}
      DOMAIN_NAME: ${DOMAIN_NAME:?err}
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY:?err}
      PRIVATE_KEY: ${PRIVATE_KEY:?err}
      PUBLIC_KEY: ${PUBLIC_KEY:?err}
      EMAIL_HOST: ${EMAIL_HOST:?err}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER:?err}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD:?err}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL:?err}
      DEFAULT_TO_EMAIL: ${DEFAULT_TO_EMAIL:?err}
      POSTGRES_DB: ${DB_NAME:?err}
      POSTGRES_USER: ${DB_USERNAME:?err}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?err}
    volumes:
      - static_volume:/backend/static-serve
      - media_volume:/backend/media-serve
    env_file:
      - ./.env
    depends_on:
      - db
    restart: always

  db:
    image: postgres:${POSTGRES_VERSION:?err}-alpine
    user: ${DB_USERNAME:?err}
    environment:
      POSTGRES_DB: ${DB_NAME:?err}
      POSTGRES_USER: ${DB_USERNAME:?err}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?err}
      POSTGRES_PORT: 5432
    env_file:
      - ./.env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: always

  nginx:
    build:
      context: ./nginx/https
      dockerfile: Dockerfile
      args:
        NGINX_VERSION: ${NGINX_VERSION:?err}
        DOMAIN_NAME: ${DOMAIN_NAME:?err}
    volumes:
      - static_volume:/static-serve
      - media_volume:/media-serve
      - ./nginx/https/vue_build:/vue_build
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    ports:
      - ${HTTP_PORT:-80}:80
      - ${HTTPS_PORT:-443}:443
    env_file:
      - ./.env
    depends_on:
      - django
    restart: always
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    pull_policy: always
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    restart: always
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

volumes:
  static_volume:
  media_volume:
  postgres_data:
